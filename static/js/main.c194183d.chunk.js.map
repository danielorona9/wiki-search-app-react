{"version":3,"sources":["components/Title/Title.js","components/RandomSearch/RandomSearch.js","components/SearchBar/SearchBar.js","components/ArticleItem/ArticleItem.js","components/ArticleList/ArticleList.js","components/ShowList/ShowList.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","Header","as","textAlign","className","RandomSearch","href","target","rel","SearchBar","state","searchTerm","onInputChange","e","_this","setState","value","onFormSubmit","preventDefault","props","Grid","columns","centered","Row","Form","onSubmit","this","Input","icon","Icon","name","inverted","circular","link","placeholder","term","onChange","React","Component","ArticleItem","_ref","snippet","article","onArticleSelect","Card","fluid","color","pageid","onClick","title","dangerouslySetInnerHTML","__html","ArticleList","articles","renderedList","map","components_ArticleItem_ArticleItem","key","Container","length","listErrorTextColor","ShowList","fetchSuccess","components_ArticleList_ArticleList","style","App","selectedArticle","onSearchSubmit","fetchJsonp","concat","jsonpCallbackFunction","then","response","ok","json","Error","networkError","console","log","message","data","query","search","catch","components_Title_Title","Segment","basic","components_RandomSearch_RandomSearch","Divider","horizontal","components_SearchBar_SearchBar","components_ShowList_ShowList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAWeA,UARD,kBACZC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,SAASC,UAAU,gBAA7C,kBCUWC,UAZM,WACnB,OACEP,EAAAC,EAAAC,cAAA,KACEI,UAAU,gCACVE,KAAK,+CACLC,OAAO,SACPC,IAAI,uBAJN,sEC4BWC,6MA9BbC,MAAQ,CAAEC,WAAY,MAEtBC,cAAgB,SAAAC,GACdC,EAAKC,SAAS,CACZJ,WAAYE,EAAEN,OAAOS,WAIzBC,aAAe,SAAAJ,GACbA,EAAEK,iBACFJ,EAAKK,MAAMF,aAAaH,EAAKJ,MAAMC,qFAInC,OACEb,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,QAAS,GAAIC,UAAQ,GACzBxB,EAAAC,EAAAC,cAACoB,EAAA,EAAKG,IAAN,KACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAMC,SAAUC,KAAKT,cACnBnB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CACEC,KAAM9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAMC,KAAK,SAASC,UAAQ,EAACC,UAAQ,EAACC,MAAI,IAChDC,YAAY,YACZlB,MAAOU,KAAKhB,MAAMyB,KAClBC,SAAUV,KAAKd,0BAvBLyB,IAAMC,oBC0BfC,EApBK,SAAAC,GAAkC,IAJ1BC,EAILC,EAA+BF,EAA/BE,QAASC,EAAsBH,EAAtBG,gBAC9B,OACE7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CACEC,OAAK,EACLC,MAAM,OACNxC,KAAM,mCAAqCoC,EAAQK,OACnDxC,OAAO,SACPC,IAAI,sBACJwC,QAAS,kBAAML,EAAgBD,KAE/B5C,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UAAUsC,EAAQO,OACjCnD,EAAAC,EAAAC,cAAA,OACEI,UAAU,cACV8C,yBAlBkBT,EAkB2BC,EAAQD,QAjBtD,CAAEU,OAAQV,kBCgBJW,UAjBK,SAAAZ,GAAmC,IAAhCa,EAAgCb,EAAhCa,SAAUV,EAAsBH,EAAtBG,gBACzBW,EAAeD,EAASE,IAAI,SAAAb,GAChC,OACE5C,EAAAC,EAAAC,cAACwD,EAAD,CACEC,IAAKf,EAAQK,OACbJ,gBAAiBA,EACjBD,QAASA,MAIf,OACE5C,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACE5D,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YAAYiD,EAASM,OAApC,YACCL,KCdDM,EAAqB,CACzBd,MAAO,QAmBMe,EAhBE,SAAArB,GAAiD,IAA9Ca,EAA8Cb,EAA9Ca,SAAUV,EAAoCH,EAApCG,gBAAiBmB,EAAmBtB,EAAnBsB,aAC7C,OAAIA,EACET,EAASM,OAAS,EAElB7D,EAAAC,EAAAC,cAAC+D,EAAD,CAAaV,SAAUA,EAAUV,gBAAiBA,IAG7C7C,EAAAC,EAAAC,cAAA,KAAGgE,MAAOJ,GAAV,qCAEiB,IAAjBE,EACFhE,EAAAC,EAAAC,cAAA,KAAGgE,MAAOJ,GAAV,qCAEA,0CC8CIK,6MAvDbvD,MAAQ,CACN2C,SAAU,GACVa,gBAAiB,KACjBJ,aAAc,QAGhBK,eAAiB,SAAAxD,GACfyD,IAAU,2GAAAC,OACmG1D,EADnG,gEAER,CACE2D,sBAAuB,kBAGxBC,KACC,SAAAC,GACE,GAAIA,EAASC,GACX,OAAOD,EAASE,OAElB,MAAM,IAAIC,MAAM,oBAElB,SAAAC,GAAY,OAAIC,QAAQC,IAAIF,EAAaG,WAE1CR,KAAK,SAAAS,GACJlE,EAAKC,SAAS,CAAEsC,SAAU2B,EAAKC,MAAMC,OAAQpB,cAAc,MAE5DqB,MAAM,SAAAtE,GACLgE,QAAQC,IAAIjE,GACZC,EAAKC,SAAS,CAAE+C,cAAc,SAIpCnB,gBAAkB,SAAAD,GAChB5B,EAAKC,SAAS,CAAEmD,gBAAiBxB,6EAIjC,OACE5C,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACE5D,EAAAC,EAAAC,cAACoF,EAAD,MACAtF,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAASC,OAAK,EAACnF,UAAW,UACxBL,EAAAC,EAAAC,cAACuF,EAAD,MACAzF,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CAASC,YAAU,EAACrF,UAAU,gBAA9B,MAGAN,EAAAC,EAAAC,cAAC0F,EAAD,CAAWzE,aAAcS,KAAKyC,kBAEhCrE,EAAAC,EAAAC,cAAC2F,EAAD,CACEtC,SAAU3B,KAAKhB,MAAM2C,SACrBV,gBAAiBjB,KAAKiB,gBACtBmB,aAAcpC,KAAKhB,MAAMoD,uBAlDjBzB,IAAMC,WCGJsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpG,EAAAC,EAAAC,cAACmG,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.c194183d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Header } from \"semantic-ui-react\";\nimport \"./Title.css\";\nconst Title = () => (\n  <div>\n    <Header as=\"h1\" textAlign=\"center\" className=\"header-title\">\n      Wiki Search\n    </Header>\n  </div>\n);\n\nexport default Title;\n","import React from \"react\";\nimport \"./RandomSearch.css\";\n\nconst RandomSearch = () => {\n  return (\n    <a\n      className=\"ui header medium teal center \"\n      href=\"https://en.wikipedia.org/wiki/Special:Random\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Click Here for Random Article\n    </a>\n  );\n};\nexport default RandomSearch;\n","import React from \"react\";\nimport { Grid, Form, Icon, Input } from \"semantic-ui-react\";\nclass SearchBar extends React.Component {\n  state = { searchTerm: \"\" };\n\n  onInputChange = e => {\n    this.setState({\n      searchTerm: e.target.value\n    });\n  };\n\n  onFormSubmit = e => {\n    e.preventDefault();\n    this.props.onFormSubmit(this.state.searchTerm);\n  };\n\n  render() {\n    return (\n      <Grid columns={12} centered>\n        <Grid.Row>\n          <Form onSubmit={this.onFormSubmit}>\n            <Input\n              icon={<Icon name=\"search\" inverted circular link />}\n              placeholder=\"Search...\"\n              value={this.state.term}\n              onChange={this.onInputChange}\n            />\n          </Form>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\nexport default SearchBar;\n","import React from \"react\";\nimport { Card } from \"semantic-ui-react\";\n\n//data has embedded tags and has to be pushed with innerHTML\nconst createSnippetMarkup = snippet => {\n  return { __html: snippet };\n};\n\nconst ArticleItem = ({ article, onArticleSelect }) => {\n  return (\n    <Card\n      fluid\n      color=\"teal\"\n      href={\"https://en.wikipedia.org/?curid=\" + article.pageid}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      onClick={() => onArticleSelect(article)}\n    >\n      <div className=\"content\">\n        <div className=\"header\">{article.title}</div>\n        <div\n          className=\"description\"\n          dangerouslySetInnerHTML={createSnippetMarkup(article.snippet)}\n        />\n      </div>\n    </Card>\n  );\n};\nexport default ArticleItem;\n","import React from \"react\";\nimport ArticleItem from \"../ArticleItem/ArticleItem\";\nimport { Container } from \"semantic-ui-react\";\nimport \"./ArticleList.css\";\nconst ArticleList = ({ articles, onArticleSelect }) => {\n  const renderedList = articles.map(article => {\n    return (\n      <ArticleItem\n        key={article.pageid}\n        onArticleSelect={onArticleSelect}\n        article={article}\n      />\n    );\n  });\n  return (\n    <Container>\n      <div className=\"txtColor\">{articles.length} Results</div>\n      {renderedList}\n    </Container>\n  );\n};\nexport default ArticleList;\n","import React from \"react\";\nimport ArticleList from \"../ArticleList/ArticleList\";\n\nconst listErrorTextColor = {\n  color: \"#fff\"\n};\n\nconst ShowList = ({ articles, onArticleSelect, fetchSuccess }) => {\n  if (fetchSuccess) {\n    if (articles.length > 0) {\n      return (\n        <ArticleList articles={articles} onArticleSelect={onArticleSelect} />\n      );\n    } else {\n      return <p style={listErrorTextColor}>No article found with that term.</p>;\n    }\n  } else if (fetchSuccess === false) {\n    return <p style={listErrorTextColor}> No article found with that term.</p>;\n  } else {\n    return null;\n  }\n};\n\nexport default ShowList;\n","import React from \"react\";\nimport \"./App.css\";\nimport Title from \"./components/Title/Title\";\nimport RandomSearch from \"./components/RandomSearch/RandomSearch\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport ShowList from \"./components/ShowList/ShowList\";\nimport fetchJsonp from \"fetch-jsonp\";\nimport { Container, Divider, Segment } from \"semantic-ui-react\";\n\nclass App extends React.Component {\n  state = {\n    articles: [],\n    selectedArticle: null,\n    fetchSuccess: null\n  };\n\n  onSearchSubmit = searchTerm => {\n    fetchJsonp(\n      `https://en.wikipedia.org/w/api.php?action=query&format=json&prop=&list=search&continue=-%7C%7C&srsearch=${searchTerm}&srnamespace=0&srlimit=10&sroffset=20&srinfo=&srprop=snippet`,\n      {\n        jsonpCallbackFunction: \"searchResults\"\n      }\n    )\n      .then(\n        response => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        networkError => console.log(networkError.message)\n      )\n      .then(data => {\n        this.setState({ articles: data.query.search, fetchSuccess: true });\n      })\n      .catch(e => {\n        console.log(e);\n        this.setState({ fetchSuccess: false });\n      });\n  };\n\n  onArticleSelect = article => {\n    this.setState({ selectedArticle: article });\n  };\n\n  render() {\n    return (\n      <Container>\n        <Title />\n        <Segment basic textAlign={\"center\"}>\n          <RandomSearch />\n          <Divider horizontal className=\"textDivColor\">\n            Or\n          </Divider>\n          <SearchBar onFormSubmit={this.onSearchSubmit} />\n        </Segment>\n        <ShowList\n          articles={this.state.articles}\n          onArticleSelect={this.onArticleSelect}\n          fetchSuccess={this.state.fetchSuccess}\n        />\n      </Container>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}